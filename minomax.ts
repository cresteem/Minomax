import { rmSync } from "fs";
import { globSync } from "glob";
import configurations from "./configLoader";
import imageWorker from "./lib/image";
import imageGenerator from "./lib/imageset/imageset";
import {
	ImageWorkerParamsMain,
	VideoWorkerParamsMain,
} from "./lib/options";
import { copyFiles } from "./lib/utils";
import videoWorker from "./lib/video";
import webDocWorker from "./lib/webdocs/webdocs";

export default async function minomax(
	imageWorkerParams: ImageWorkerParamsMain,
	videoWorkerParams: VideoWorkerParamsMain,
	destinationBasePath: string = configurations.destPath,
	webDocFilesPatterns: string[] | false = false,
	removeOld: boolean = true,
) {
	const ignorePatterns: string[] = [
		"node_modules/**",
		`${destinationBasePath}/**`,
	];

	const defaultWebdocsPatterns: string[] = [
		"**/*.css",
		"**/*.js",
		"**/*.html",
		"**/*.htm",
	];
	webDocFilesPatterns = webDocFilesPatterns || defaultWebdocsPatterns;

	/* Step:1 Pre processing - I-delete old outputs & II-copy (js,css,html)files to destination*/
	/* ------ */
	// I-Delete old dest
	if (removeOld) {
		rmSync(destinationBasePath, { force: true, recursive: true });
	}

	// II- Copy webdoc files to dest path
	const webDocFiles: string[] = globSync(webDocFilesPatterns, {
		ignore: ignorePatterns,
		absolute: true,
	});
	await copyFiles(webDocFiles, destinationBasePath);
	/* ------- */

	/* 2. I-Image set generation , II-Img tag transformation, and III-Video thumbnail linking*/
	/* ------ */
	// I & II & III in single function
	const htmlPathPatterns: string[] = [...webDocFilesPatterns].filter(
		(pattern: string) => pattern.endsWith(".html"),
	);
	await imageGenerator(
		htmlPathPatterns,
		destinationBasePath,
		ignorePatterns,
	);

	/* 3.Image worker - compress images that was generated by previous worker*/
	/*-------*/
	//Type - 1 - Standard pictures
	const imagePatterns: string[] = [
		"**/*.png",
		"**/*.jpg",
		"**/*.jpeg",
		"**/*.bmp",
		"**/*.webp",
	];
	const { targetFormat } = imageWorkerParams;
	const imagePaths: string[] = globSync(imagePatterns, {
		ignore: ignorePatterns,
		cwd: destinationBasePath, //taking only generated images
		absolute: true,
	});
	const compressedImagesDestination: string = process.cwd(); //overwriting uncompressed images with compressed
	await imageWorker(imagePaths, targetFormat, compressedImagesDestination);

	//Type - 2 - SVG images
	const svgFiles: string[] = globSync(["**/*.svg"], {
		ignore: ignorePatterns,
		cwd: destinationBasePath, //taking only generated images
		absolute: true,
	});
	await imageWorker(svgFiles, "svg", compressedImagesDestination);
	/* ------- */

	/* 4.Video worker - I-Compress videos & II-Generate thumbnails of them*/
	/* ------- */
	// I & II in one call
	const { codecType, encodeLevel } = videoWorkerParams;
	const videoEncodeLevel: 1 | 2 | 3 = encodeLevel || 3;
	const thumbnailSeekPercent: number = 15;
	const videoPathPatterns: string[] = [
		"**/*.mp4",
		"**/*.webm",
		"**/*.mkv",
		"**/*.wmv",
		"**/*.flv",
		"**/*.avi",
		"**/*.mov",
	];

	const videoPaths: string[] = globSync(videoPathPatterns, {
		ignore: ignorePatterns,
		absolute: true,
	});
	await videoWorker(
		videoPaths,
		codecType,
		videoEncodeLevel,
		thumbnailSeekPercent,
		destinationBasePath,
	);
	/* ------- */

	/* 5.Webdoc worker - minify HTML, JS & CSS */
	/* ------- */
	const fileSearchBasePath: string = destinationBasePath;
	const minifiedWebDocsDestination: string = process.cwd(); //overwriting non-minified files with minified files
	await webDocWorker(
		webDocFilesPatterns,
		minifiedWebDocsDestination,
		fileSearchBasePath,
		ignorePatterns,
	);
	/* ------- */
}
